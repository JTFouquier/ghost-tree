#!/usr/bin/env python
# third party dependencies (i.e. packages not included with python)
import click
import skbio

# library code imports
from ghosttree.util import compare_tip_to_tip_distances
from ghosttree.filter import filter_positions
from ghosttree.tips.cluster import preprocess_tip_sequences
from ghosttree.silva.filter import fungi_from_fasta
from ghosttree.scaffold.hybridtree import scaffold_tips_into_backbone


@click.group()
def cli():
    pass

# click command and args here are for the user
# cli group is the "invisible" top level group
@cli.command("compare-trees")
@click.argument("tree-file1", type=click.File("U"))
@click.argument("tree-file2", type=click.File("U"))
@click.option("-m", "--method", default="pearson",
              type=click.Choice(["pearson", "spearman"]),
              help="correlation method to use in Mantel test")
def compare_trees(tree_file1, tree_file2, method):
    coeff, p_value, n = compare_tip_to_tip_distances(tree_file1,
                                                     tree_file2,
                                                     method)
    click.echo("Correlation coefficient: %f" % coeff)
    click.echo("p-value: %f" % p_value)
    click.echo("Number of overlapping tips: %d" % n)

@click.group()
def cli():
    pass

@cli.command("filter-alignment-positions")
@click.argument("alignment-file", type=click.File("U"))
@click.argument("maximum-gap-frequency", type=float)
@click.argument("maximum-position-entropy", type=float)
@click.argument("output-file", type=click.File("w"))
def filter_alignment_positions(alignment_file, maximum_gap_frequency,
                               maximum_position_entropy, output_file):
    skbio.write(filter_positions(alignment_file, maximum_gap_frequency,
                                 maximum_position_entropy),
                                 into=output_file, format="fasta")

# silva is nested under cli group (silva shows up on command line
# interface but cli does not
@cli.group()
def silva():
    pass

@silva.command("extract-fungi")
@click.argument("fasta-file", type=click.File("U"))
@click.argument("accession-file", type=click.File("U"))
@click.argument("taxonomy-file", type=click.File("U"))
@click.argument("output-file", type=click.File("w"))
def extract_fungi(fasta_file, accession_file, taxonomy_file, output_file):
    skbio.write(fungi_from_fasta(fasta_file, accession_file, taxonomy_file),
                into=output_file, format="fasta")

@cli.group()
def tips():
    pass

@tips.command("group-tips")
@click.argument("species-level-sequence-file", type=str)
@click.argument("similarity-threshold", type=float)
@click.argument("output-file", type=str)
def group_tips(species_level_sequence_file, similarity_threshold,
               output_file):
    preprocess_tip_sequences(species_level_sequence_file,
                             similarity_threshold,
                             output_file)

@cli.group()
def scaffold():
    pass

@scaffold.command("hybrid-tree")
@click.argument("tips-otu-table", type=click.File("U"))
@click.argument("tips-taxonomy-file", type=click.File("U"))
@click.argument("tips-sequence-file", type=click.File("U"))
@click.argument("backbone-alignment-file", type=click.File("U"))
@click.argument("ghost-tree-output-file", type=click.File("w"))
def hybrid_tree(tips_otu_table, tips_taxonomy_file, tips_sequence_file,
                backbone_alignment_file, ghost_tree_output_file):
    scaffold_tips_into_backbone(tips_otu_table, tips_taxonomy_file,
                                tips_sequence_file,
                                backbone_alignment_file,
                                ghost_tree_output_file)



if __name__ == "__main__":
    cli()
